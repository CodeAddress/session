https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html

localClass(局部类)
在类方法里面定义的类，局部类访问的所属方法的局部变量时，该变量必须是final类型，主要原因是方法里面的局部变量会随着方法的调用结束而回收，
而此时局部类可能还存在引用指向它，固两者的生命周期不一样就会导致出现问题.


innerClass和localClass   ---interface(接口本身是静态的)
一般类和局部类类似，不能定义任何的静态成员
局部类的静态成员只可能出现在常量中(static final)


anonymousClasses(匿名类)
不能在匿名类中声明构造函数
HelloWorld frenchGreeting = new HelloWorld() {
            String name = "tout le monde";
            public void greet() {
                greetSomeone("tout le monde");
            }
            public void greetSomeone(String someone) {
                name = someone;
                System.out.println("Salut " + name);
            }
        };

lambda expression(lambda 表达式)
Lambda表达式的类型，也被称为“目标类型（target type）”，lambda表达式的目标类型必须是“函数式接口（functional interface）”。
函数式接口代表只包含一个抽象方法的接口。函数式接口可以包含多个默认方法，类方法，但只能声明一个抽象方法。
如果采用匿名类型内部类来创建函数式接口的实例，则只需要实现一个抽象方法，在这种情况下即可采用lambda表达式来创建对象，
该表达式创建出来的对象目标就是这个函数接口。（可以用@FunctionalInterface注解来对函数接口实行限制）

##表达式的目标类型必须是明确的函数式接口
##lambda表达式只能为函数式接口创建对象，lambda表达式只能实现一个方法，因此他它只能为只有一个抽象方法的借口（函数式接口）创建对象。

***Function：这类接口通常包含一个apply抽象方法，对参数进行处理转换，然后返回一个新的值。

***Consumer：这类接口通常包含一个accept抽象方法，用于对参数进行处理，但是不返回一个新的值。

***Predicate：这类接口通常包含一个test抽象方方法，通过对参数的处理计算，然后返回一个boolean值

***Supplier:这类接口通常包含一个getAs***抽象方法，这种方法无参数，按照某种逻辑运算返回一个数据值。

return 语句必须放在{}中，而void不需要
p -> {
    return p.getGender() == Person.Sex.MALE
        && p.getAge() >= 18
        && p.getAge() <= 25;
}
email -> System.out.println(email)

